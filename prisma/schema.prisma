// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles within an organization
enum UserRole {
  WRITER
  EDITOR
  ORG_ADMIN
}

// Enum for the status of a membership request
enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum for the subscription plans
enum Plan {
  FREE
  GROWTH
  SCALE
  CUSTOM // Add the new custom/enterprise plan
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       Boolean?
  image               String?
  // ADDED: Bio field for author information
  onboardingCompleted Boolean?
  bio                 String?          @db.Text
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  role                UserRole?
  membershipStatus    MembershipStatus @default(PENDING)

  organizationId String?
  organization   Organization? @relation("OrganizationMembers", fields: [organizationId], references: [id], onDelete: SetNull)

  ownedOrganization Organization? @relation("OrganizationOwner")
  invites           Invite[]      @relation("UserInvites")

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  membershipRequest MembershipRequest[] @relation("UserRequests")
  // ADDED: Relation to the Bookmark model
  bookmarks         Bookmark[]
  notifications     Notification[]      @relation("UserNotifications")
  // --- FIX: Add the back-relation ---
  actions           Notification[]      @relation("UserActions")

  @@index([email])
  @@index([organizationId])
  Draft Draft[]
}

model Organization {
  id               String   @id @default(cuid())
  name             String
  website          String
  apiKey           String   @unique @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  plan             Plan     @default(FREE)
  monthlyPostViews Int      @default(0)

  ownerId     String       @unique
  subscribers Newsletter[]
  owner       User         @relation("OrganizationOwner", fields: [ownerId], references: [id])

  members            User[]              @relation("OrganizationMembers")
  posts              Post[]
  membershipRequests MembershipRequest[] @relation("OrgRequests")
  limitWarningSentAt DateTime?
  categories         Category[]
  tags               Tag[]

  Invite Invite[]

  Draft Draft[]
}

// Add a new enum for InviteStatus
enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// In the MembershipRequest model, add a status field
model MembershipRequest {
  id        String           @id @default(cuid())
  message   String?          @db.Text
  // FIX: Change status to the enum to handle rejection
  status    MembershipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  userId         String
  user           User         @relation("UserRequests", fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation("OrgRequests", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

// Add a new model for Invitations
model Invite {
  id        String       @id @default(cuid())
  email     String // The email of the person being invited
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())
  expiresAt DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Optional: Link to an existing user if they have an account
  invitedUserId String? @unique
  invitedUser   User?   @relation("UserInvites", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         Json
  excerpt         String?   @db.Text
  featuredImage   String?
  // 'published' boolean is no longer needed here. If it exists in Post, it's published.
  metaTitle       String?
  metaDescription String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?
  featured        Boolean   @default(false)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]
  views      PostView[]
  bookmarks  Bookmark[]

  // --- NEW: Relation to its draft versions ---
  drafts     Draft[]

  @@index([organizationId])
}


// --- NEW: The Draft Model ---
// This model holds all work-in-progress content.
model Draft {
  id              String    @id @default(cuid())
  title           String
  slug            String    // Slugs can be non-unique here until publish
  content         Json
  excerpt         String?   @db.Text
  featuredImage   String?
  metaTitle       String?
  metaDescription String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  tags       Tag[]

  // --- NEW: Relation back to a live Post ---
  // This will be set if the draft is an edit of an already published post.
  postId     String?
  post       Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([postId])
}

// FIX: Modify the Category model to belong to an Organization
model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String
  description String?
  posts       Post[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, slug]) // A slug must be unique within an organization
  @@index([organizationId])
  Draft Draft[]
}

// FIX: Modify the Tag model to belong to an Organization
model Tag {
  id    String @id @default(cuid())
  name  String
  slug  String
  posts Post[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name]) // A tag name must be unique within an organization
  @@index([organizationId])
  Draft Draft[]
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique // Keep this unique for the whole platform
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- FIX: Add relation to Organization ---
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@unique([email, organizationId], name: "email_organizationId")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId   String
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("CommentToComment")
}

// ADDED: Model to track views on a post
model PostView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  postId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  // Optional fields for more detailed analytics
  sessionId String?
  userId    String?
  ip        String?

  @@index([postId])
}

// ADDED: Model for user bookmarks
model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  relatedId String?

  // The user who RECEIVES the notification
  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // --- FIX: The user who PERFORMED the action ---
  actorId String
  actor   User   @relation("UserActions", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
}
