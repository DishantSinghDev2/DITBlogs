// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles within an organization
enum UserRole {
  WRITER
  EDITOR
  ORG_ADMIN
}

// Enum for the status of a membership request
enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum for the subscription plans
enum Plan {
  FREE
  GROWTH
  SCALE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    Boolean?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  role             UserRole? // Role within the organization
  membershipStatus MembershipStatus @default(PENDING)

  // A user can be part of one organization
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  accounts          Account[]
  sessions          Session[]
  posts             Post[] // Posts authored by the user
  comments          Comment[]
  membershipRequest MembershipRequest[] @relation("UserRequests")

  @@index([email])
  @@index([organizationId])
}

model Organization {
  id                 String   @id @default(cuid())
  name               String
  website            String // The website URL to connect for blogs
  apiKey             String   @unique @default(cuid()) // For API access
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // The user who created/owns the organization
  ownerId            String   @unique
  owner              User     @relation(fields: [ownerId], references: [id])
  
  // Subscription plan details
  plan               Plan     @default(FREE)
  monthlyPostViews   Int      @default(0) // Counter for monthly views, reset via a cron job
  
  members            User[]
  posts              Post[]
  membershipRequests MembershipRequest[] @relation("OrgRequests")
}

model MembershipRequest {
  id             String           @id @default(cuid())
  message        String?          @db.Text
  status         MembershipStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  userId         String
  user           User             @relation("UserRequests", fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation("OrgRequests", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         Json      // Using JSON for rich text editor content
  excerpt         String?   @db.Text
  featuredImage   String?
  published       Boolean   @default(false)
  metaTitle       String?
  metaDescription String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?
  readingTime     Int?

  // The organization this post belongs to
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // The user who authored the post
  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]

  @@index([organizationId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  posts       Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId   String
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("CommentToComment")
}