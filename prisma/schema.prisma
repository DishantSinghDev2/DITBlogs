// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean?
  image         String?
  bio           String?  @db.Text
  role          String   @default("admin") // user, writer, editor, admin
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  followers     User[]   @relation("UserFollows")
  following     User[]   @relation("UserFollows")
  website       String?
  isProUser     Boolean

  accounts               Account[]
  sessions               Session[]
  posts                  Post[]
  comments               Comment[]
  bookmarks              Bookmark[]
  notifications          Notification[]
  affiliateLinks         AffiliateLink[]
  notificationsSettings  NotificationSettings? @relation(fields: [notificationSettingsId], references: [id])
  notificationSettingsId String?

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  role      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

model Post {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  excerpt         String?   @db.Text
  featuredImage   String?
  published       Boolean   @default(false)
  featured        Boolean   @default(false)
  metaTitle       String?
  metaDescription String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?
  readingTime     Int?

  authorId   String
  author     User       @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]
  views      PostView[]
  bookmarks  Bookmark[]
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  posts       Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId   String
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("CommentToComment")
}

model PostView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  postId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  sessionId String?
  userId    String?
  ip        String?
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedId String?
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seo {
  id                 String   @id @default(cuid())
  metaTitle          String?
  metaDescription    String?  @db.Text
  ogTitle            String?
  ogDescription      String?  @db.Text
  ogImage            String?
  twitterTitle       String?
  twitterDescription String?  @db.Text
  twitterImage       String?
  canonicalUrl       String?
  robotsTxt          String?  @db.Text
  sitemapEnabled     Boolean  @default(false)
  schemaOrgEnabled   Boolean  @default(false)
  googleAnalyticsId  String?
  googleTagManagerId String?
  metaPixelId        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Page {
  id        String   @id @default(cuid())
  title     String
  excerpt   String?  @db.Text
  slug      String   @unique
  content   String   @db.Text
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AffiliateLink {
  id          String   @id @default(cuid())
  name        String
  url         String
  description String?
  shortCode   String   @unique
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  userId    String?
  createdAt DateTime @default(now())
}

model NotificationSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  marketingEmails    Boolean  @default(true)
  newComment         Boolean  @default(true)
  newFollower        Boolean  @default(true)
  newPost            Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  User               User[]
}
